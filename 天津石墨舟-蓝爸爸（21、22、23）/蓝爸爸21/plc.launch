<?xml version="1.0"?>
<launch>
    <arg name="modbus" default="true" />

    <arg name="name" default="" />
    <arg name="port" default="192.168.0.14" />
    <arg name="rate" default="50.0" />
    <arg name="debug" default="false" />

    <arg name="frame_id" default="base_plc$(arg name)" />

    <arg name="modbus_tcp" default="false" />
    <arg name="type" default="socket" if="$(arg modbus_tcp)" />
    <arg name="byte_head" default="0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00" if="$(arg modbus_tcp)" />
    <arg name="byte_tail" default="" if="$(arg modbus_tcp)" />
    <arg name="byte_write" default="0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x00" if="$(arg modbus_tcp)" />
    <arg name="byte_read" default="0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x00" if="$(arg modbus_tcp)" />
    <arg name="plc_ratio" default="100" if="$(arg modbus_tcp)" />

    <arg name="modbus_rtu" default="false" />
    <arg name="type" default="serial" if="$(arg modbus_rtu)" />
    <arg name="byte_head" default="0x06" if="$(arg modbus_rtu)" />
    <arg name="byte_tail" default=", crc16, big" if="$(arg modbus_rtu)" />
    <arg name="byte_write" default="0x06" if="$(arg modbus_rtu)" />
    <arg name="byte_read" default="0x06" if="$(arg modbus_rtu)" />
    <arg name="plc_ratio" default="3200" if="$(arg modbus_rtu)" />

    <arg name="linde" default="false" />
    <arg name="use_diagnostics_legacy" default="$(arg linde)" />
    <arg name="use_joy" default="$(arg linde)" />
    <arg name="use_odom" default="$(arg linde)" />
    <arg name="use_cmd_vel" default="$(arg linde)" />

    <arg name="wheel_base" default="0.23333" />
    <arg name="wheel_ratio" default="23333.3" />
    <arg name="wheel_encoder" default="1.0" />

    <arg name="linear_mid" default="4.1" />
    <arg name="angular_mid" default="0.5" />
    <arg name="linear_ratio" default="1.2" />
    <arg name="angular_ratio" default="0.005" />
    <arg name="speed_limit" default="0.8" />
    <arg name="speed_kp" default="2.0" />
    <arg name="speed_ki" default="0.01" />
    <arg name="speed_ki_absmax" default="1.0" />

    <arg name="angular_pos_min" default="100" />
    <arg name="angular_pos_max" default="900" />
    <arg name="angular_neg_min" default="100" />
    <arg name="angular_neg_max" default="900" />
    <arg name="steering_angle_ki" default="0.0002" />
    <arg name="steering_angle_ki_absmax" default="0.05" />

    <arg name="use_lift" default="true" />
    <arg name="lift_ratio" default="288000.0" />
    <arg name="lift_vel" default="0.0041666" />
    <arg name="lift_dump_vel" default="$(arg lift_vel)" />
    <arg name="lift_load_vel" default="$(arg lift_vel)" />
    <arg name="lift_bias_vel" default="$(arg lift_vel)" />
    <arg name="lift_dump_pos" default="0.0" />
    <arg name="lift_load_pos" default="0.035" />
    <arg name="lift_bias_pos" default="0.002" />

    <node if="$(arg modbus)" name="rosbridge_plc$(arg name)" pkg="rosbridge_driver" type="rosbridge_driver" output="screen">
        <remap from="cmd_vel" to="cmd_vel_rectified" />
        <param name="plc_port" value="$(arg port)" />
        <param name="debug_io" value="$(arg debug)" />
        <rosparam subst_value="true">
            port_chain:
              - name: plc_port
                type: $(arg type)
                ip_port: 502
            topic_chain:
              - name: diagnostics
                type: diagnostic_updater/diagnostic_updater
                rate: $(arg rate)
                op: publish
                hardware_id: $(arg frame_id)
                frame_id: $(arg frame_id)
                level: 0 #[diagnostics_legacy/level]
                values: [serial_port, vendor_name, estop]
                serial_port: $(arg port)
                vendor_name: modbus
                estop: ['=', diagnostics_legacy/estop]
              - name: diagnostics_legacy
                type: diagnostic_msgs/DiagnosticArray
                rate: 1.0
                topic: /diagnostics
                enabled: $(arg use_diagnostics_legacy)
                estop: ['=', joy/estop]
                iname: estop/base
                level: [estop.0]
                values: [estop_status]
                estop_status: ['=', estop]
              - name: joy
                type: sensor_msgs/Joy
                rate: 10.0
                enabled: $(arg use_joy)
                axes: [linear_y, linear_x, joy_lt, angular_z, linear_z, joy_rt, angular_y, angular_x]
                buttons: [enable, buzzer, dump, load, joy_lb, joy_rb, estop, start, modex, pedal, stick]
                linear_x: [speed, '*', [cos, steering_angle]]
                angular_z: [speed, '*', [sin, steering_angle], '/', cmd_vel/wheel_base]

                linear_min: 0.574 # 8.2*7%
                linear_max: 2.87 # 8.2*35%
                linear_mid: 4.1 # 8.2*50%

                enable: [i_h.2]
                joy_lt: [1, -, [sign, [abs, i_h]]]
                joy_rt: [1, -, [sign, [abs, [estop, +, start, +, pedal, +, stick]]]]
                buzzer: [i_h.3]
                dump: [i_h.4]
                load: [i_h.5]
                <!-- estop: [[i_l.2, '*', 1], +, [[1, -, i_l.1], '*', 2], +, [i_h.0, '*', 16], +, [i_h.1, '*', 32]] -->
                estop: [1, -, i_l.2]
                <!-- start: [[[1, -, i_l.3], '*', 1], +, [i_l.0, '*', 2], +, [[1, -, i_l.0], '*', i_l.1, '*', 4]] -->
                start: [i_l.2, '*', [1, -, i_l.3]]
                <!-- modex: [i_l.4, +, i_l.5] -->
                pedal: [i_l.4]
                stick: [i_l.5]
                action_chain:
                  - name: plc_port
                    type: write
                    byte: [$(arg byte_head), 0x03, 0x00, 0x60, 0x00, 0x05 $(arg byte_tail)]
                  - name: plc_port
                    type: read
                    byte: [$(arg byte_read), 0x03, 0x0a, angular_neg, big, angular_pos, big, linear, big, i_h, i_l, modex, big $(arg byte_tail)]
                calc: [linear_orig, linear_bias, linear_dead, linear_sign, speed, angular_valid, angular_max, angular_mid, angular_mid_neg, angular_max_hold, steering_angle]
                calc_linear_orig: [linear_mid, -, [linear, '/', $(arg plc_ratio)]]
                calc_linear_bias: [[abs, linear_orig], -, linear_min]
                calc_linear_dead: [sign, [[sign, linear_bias], +, 1]]
                calc_linear_sign: [[1, -, [[sign, estop], '*', [1, -, [sign, pedal]]]], '*', linear_dead, '*', [sign, linear_orig]]
                calc_speed: [linear_sign, '*', [linear_bias, '*', linear_bias, '/', linear_max]]

                calc_angular_valid: [sign, [max, 888, [angular_pos, +, angular_neg], -, 888]]
                calc_angular_max: [angular_valid, '@', [angular_max_hold, [angular_pos, +, angular_neg]]]
                <!-- calc_angular_mid: [angular_max, '/', 2] -->
                calc_angular_mid: [angular_max, '*', $(arg angular_mid)]
                calc_angular_mid_neg: [angular_max, -, angular_mid]
                calc_angular_max_hold: [angular_max]
                calc_steering_angle: [[angular_mid, -, angular_pos], '/', $(arg angular_ratio), '/', angular_max, '*', 3.14159, '/', 180]

              - name: ackermann_drive_odom
                type: ackermann_msgs/AckermannDrive
                rate: $(arg rate)
                enabled: $(arg use_odom)
                wheel_base: $(arg wheel_base)
                linear_min: 0.574 # 8.2*7%
                linear_max: 2.87 # 8.2*35%
                linear_mid: $(arg linear_mid) # 8.2*50%

                speed_kp: [[speed_goal, -, speed_odom], '*', [speed_goal, -, speed_odom], '*', 4.0, +, 1.0]
                <!-- speed_kp: $(arg speed_kp) -->
                speed_ki: $(arg speed_ki)
                speed_ki_absmax: $(arg speed_ki_absmax)
                steering_angle_ki: $(arg steering_angle_ki)
                steering_angle_ki_absmax: $(arg steering_angle_ki_absmax)

                <!-- speed_odom: [sqrt, [[linear_x, '*', linear_x], +, [angular_z, '*', angular_z, '*', wheel_base, '*', wheel_base]], '*', [sign, [[sign, linear_x], +, 0.5]]] -->
                <!-- steering_angle_odom: [atan, [angular_z, '*', wheel_base, '/', [linear_x, +, 0.000000001]]] -->
                speed_odom: [speed]
                steering_angle_odom: [steering_angle]

                angular_pos: [joy/angular_mid, -, [steering_angle_poll, '/', 3.14159, '*', 180, '*', $(arg angular_ratio), '*', joy/angular_max], -, [angular_ki, '*', joy/angular_mid]]
                angular_neg: [joy/angular_mid_neg, +, [steering_angle_poll, '/', 3.14159, '*', 180, '*', $(arg angular_ratio), '*', joy/angular_max], +, [angular_ki, '*', joy/angular_mid]]
                angular_pos_norm: [min, [max, angular_pos, $(arg angular_pos_min)], $(arg angular_pos_max)]
                angular_neg_norm: [min, [max, angular_neg, $(arg angular_neg_min)], $(arg angular_neg_max)]

                linear_kp: [[sign, [abs, speed_goal]], '*', [speed_goal, -, speed_odom], '*', speed_kp]
                <!-- linear_ki: [[speed_goal, -, speed_odom], '*', speed_ki, +, linear_ki_hold] -->
                linear_ki: [[sign, [abs, speed_goal]], '*', [[max, -0.3, [min, 0.3, [speed_goal, -, speed_odom]]], '*', speed_ki, +, linear_ki_hold]]
                angular_ki: [[sign, [abs, speed_goal]], '*', [steering_angle_poll, -, steering_angle_odom], '/', 3.14159, '*', 180, '*', steering_angle_ki, +, angular_ki_hold]

                linear: [[max, 1.23, [min, 6.97, [linear_mid, -, [[[[sqrt, [abs, speed_poll, '*', $(arg linear_ratio)]], '*', 2.25, +, 1], '*', linear_min, '*', [sign, speed_poll]], +, linear_kp], -, linear_ki]]], '*', $(arg plc_ratio)]

                speed_poll: 0.0
                steering_angle_poll: 0.0
                speed_step: 1.5
                steering_angle_step: 0.15
                poll: [[steering_angle_poll, steering_angle_step, cmd_vel/steering_angle_goal], [speed_poll, speed_step, speed_goal]]

                steering_angle_diff: [steering_angle_poll, -, steering_angle_odom]
                speed_dead: [sign, [[sign, [0.5, -, [abs, steering_angle_diff]]], +, 1]]
                speed_goal: [speed_dead, '*', cmd_vel/speed_goal]

                calc: [linear_ki_hold, angular_ki_hold]
                calc_linear_ki_hold: [max, [0, -, speed_ki_absmax], [min, speed_ki_absmax, linear_ki]]
                calc_angular_ki_hold: [max, -0.05, [min, 0.05, angular_ki]]

<!--                 echo: [linear_ki_echo, linear_ki_hold_echo, speed_goal_echo, speed_odom_echo]
                linear_ki_echo: ['=', linear_ki]
                linear_ki_hold_echo: ['=', linear_ki_hold]
                speed_goal_echo: ['=', cmd_vel/speed_goal]
                speed_odom_echo: ['=', speed_odom] -->

<!--                 echo: [angular_ki_echo, angular_ki_hold_echo, steering_angle_echo, steering_angle_odom_echo, angular_pos_echo, angular_neg_echo]
                angular_ki_echo: ['=', angular_ki]
                angular_ki_hold_echo: ['=', angular_ki_hold]
                steering_angle_echo: ['=', [steering_angle_poll, '/', 3.14159, '*', 180]]
                steering_angle_odom_echo: ['=', [steering_angle_odom, '/', 3.14159, '*', 180]]
                angular_pos_echo: ['=', angular_pos]
                angular_neg_echo: ['=', angular_neg] -->
 
              - name: cmd_vel
                type: geometry_msgs/Twist
                <!--rate: $(arg rate)-->
                enabled: $(arg use_cmd_vel)
                wheel_base: $(arg wheel_base)
                linear_min: 0.574 # 8.2*7%
                linear_max: 2.87 # 8.2*35%
                linear_mid: $(arg linear_mid) # 8.2*50%
                speed_goal: [sqrt, [[linear_x, '*', linear_x], +, [angular_z, '*', angular_z, '*', wheel_base, '*', wheel_base]], '*', [sign, [[sign, linear_x], +, 0.5]]]
                steering_angle_goal: [atan, [angular_z, '*', wheel_base, '/', [linear_x, +, 0.000000001]]]

              - name: joy_feedback_array
                type: sensor_msgs/JoyFeedbackArray
                itype: 0
                id: 0
                enum_intensity: [itype, axes, buttons]
                enum_axes: [id, linear_y, linear_x, joy_lt, angular_z, linear_z, joy_rt, angular_y, angular_x]
                enum_buttons: [id, enable, buzzer, dump, load, joy_lb, joy_rb, estop, start, modex, pedal, stick]
                <!-- q_h: [[[sign, [abs, cmd_vel/speed_goal]], '*', 4], +, [buzzer.0, '*', 8], +, [dump.0, '*', 16], +, [load.0, '*', 32], +, [estop.0, '*', 64], +, [start.0, '*', 128]] -->
                <!-- q_l: [[start.2, '*', 1], +, [start.2, '*', 2], +, [start.2, '*', 4]] -->
                q_h: [[stick, '*', 1], +, [pedal, '*', 2], +, [modex, '*', 4]]
                q_l: [[joy_lb.0, '*', 1], +, [joy_rb.0, '*', 2], +, [estop.0, '*', 4], +, [start.0, '*', 8]]
                lift_height: [load, +, dump]
              - name: plc
                type: std_msgs/String
                rate: $(arg rate)
                op: subscribe
                diagnostic: Plc
                action_chain:
                  - name: plc_port
                    type: write
                    byte: [$(arg byte_write), 0x10, 0x00, 0x64, 0x00, 0x07, 0x0e, 0x00, 0x00, joy_feedback_array/q_h, joy_feedback_array/q_l, ackermann_drive_odom/linear, big, ackermann_drive_odom/angular_pos_norm, big, ackermann_drive_odom/angular_neg_norm, big, 0x00, 0x00, joy_feedback_array/lift_height, big $(arg byte_tail)]
                  - name: plc_port
                    type: read
                    byte: [$(arg byte_head), 0x10, 0x00, 0x64, len, big $(arg byte_tail)]

              <!--- name: waypoint_user_pub
                type: subscribe-->
        </rosparam>
    </node>
</launch>