<?xml version="1.0"?>
<launch>
    <arg name="is_client" default="false" />
    <arg name="robot_pose_ekf" default="false" />
    <arg name="ekf_localization" default="false" />
    <arg name="double_localization" default="true" />
    <arg name="use_reflection" default="false" />

    <!-- <arg name="map_transport" default="map_show" /> -->
    <arg name="map_transport" default="map" />

    <arg name="amcl_update_min_d" default="0.2" />
    <arg name="amcl_update_min_a" default="0.2" />
    <arg name="base_local_planner" default="teb_local_planner/TebLocalPlannerROS" />
    <arg name="move_base_odom" default="odometry/filtered" />
    <arg name="move_base_cmd_vel" default="move_base_vel" />
    <arg name="controller_frequency" default="20.0" />
    <arg name="transform_tolerance" default="0.2" />
    <arg name="acc_lim_x" default="0.5" />
    <arg name="acc_lim_y" default="0.0" />
    <arg name="acc_lim_theta" default="2.4" />
    <arg name="max_trans_vel" default="0.5" />
    <arg name="min_trans_vel" default="0.0" />
    <arg name="max_vel_x" default="$(arg max_trans_vel)" />
    <arg name="min_vel_x" default="$(arg min_trans_vel)" />
    <arg name="max_vel_y" default="0.0" />
    <arg name="min_vel_y" default="-$(arg max_vel_y)" />
    <arg name="max_rot_vel" default="0.5" />
    <arg name="min_rot_vel" default="0.05" />
    <arg name="yaw_goal_tolerance" default="0.01" />
    <arg name="xy_goal_tolerance" default="0.05" />
    <arg name="bez_goal_tolerance" default="0.02" />
    <arg name="x_goal_tolerance" default="$(arg bez_goal_tolerance)" />
    <arg name="y_goal_tolerance" default="$(arg bez_goal_tolerance)" />
    <arg name="yaw_hc_tolerance" default="0.01" />
    <arg name="xy_hc_tolerance" default="0.02" />
    <arg name="x_hc_tolerance" default="0.01" />
    <arg name="neutral_cost" default="10" />
    <arg name="cost_factor" default="0.1" />

    <arg name="use_imu" default="true" />
    <arg name="low_battery" default="0.1" />
    <arg name="full_battery" default="0.95" />
    <arg name="special_area_path" default="" />
    <arg name="initialization_task" default="" />
    <arg name="sound_play" default="false" />
    <arg name="median_player" default="true" />

    <arg name="scan_obstacle" default="scan_rectified" />
    <arg name="teb_agf" default="false" />
    <arg name="wall_safe_distance" default="0.3" />
    <arg name="decelerate_distance" default="2.0" />
    <arg name="stop_distance" default="0.5" />

    <arg name="footprint" default="[[0.31, 0.10], [0.20, 0.23], [-0.20, 0.23], [-0.31, 0.10], [-0.31, -0.10], [-0.20, -0.23], [0.20, -0.23], [0.31, -0.10]]" />
    <arg name="footprint_0" default="0.6" />
    <arg name="footprint_1" default="1.2" />
    <arg name="range_enabled" default="false" />
    <arg name="range_topics" default="['/sonar_12oc', '/sonar_11oc', '/sonar_10oc', '/sonar_9oc', '/sonar_8oc', '/sonar_7oc', '/sonar_6oc', '/sonar_5oc', '/sonar_4oc', '/sonar_3oc', '/sonar_2oc', '/sonar_1oc']" />

    <node name="world_map" pkg="tf_broadcaster" type="tf_broadcaster" output="screen">
        <rosparam subst_value="true">
            frame_id: world
            child_frame_id: map
            x: 0.0
            y: 0.0
            yaw: 0.0
        </rosparam>
    </node>

    <node name="base_footprint" pkg="tf_broadcaster" type="tf_broadcaster" output="screen">
        <rosparam subst_value="true">
            frame_id: base_footprint
            z: 0.05
        </rosparam>
    </node>

    <include if="$(arg is_client)" file="$(find multimaster)/launch/master.launch">
        <arg name="master" value="hitrobot-forklift-server" />
    </include>

    <node name="map_server" pkg="map_server" type="map_server" args="$(find bringup)/param/map.yaml" />

    <node name="map_edit_server" pkg="map_server" type="map_server" args="$(find bringup)/param/map_edit.yaml">
        <remap from="map" to="map_edit" />
        <rosparam subst_value="true">
            frame_id: map
        </rosparam>
    </node>

    <node if="$(arg use_reflection)" name="map_reflection_server" pkg="map_server" type="map_server" args="$(find bringup)/param/map_reflection.yaml">
        <remap from="map" to="map_reflection" />
        <rosparam subst_value="true">
            frame_id: map
        </rosparam>
    </node>

    <!-- <node name="map_show_server" pkg="map_server" type="map_server" args="$(find bringup)/param/map_show.yaml">
        <remap from="map" to="map_show" />
    </node> -->

    <node name ="map_transport" pkg="map_transport" type="map_transport_node" output="screen">
        <remap from="map" to="$(arg map_transport)" />
        <rosparam subst_value="true">
            occ_threshold: 45
        </rosparam>
    </node>
    <node name ="map_edit_transport" pkg="map_transport" type="map_transport_node" output="screen">
        <remap from="map" to="map_edit" />
        <remap from="map_stream" to="map_edit_stream" />
        <rosparam subst_value="true">
            occ_threshold: 45
        </rosparam>
    </node>
    <node name ="map_show_transport" pkg="map_transport" type="map_transport_node" output="screen">
        <remap from="map" to="map_show" />
        <remap from="map_stream" to="map_show_stream" />
        <rosparam subst_value="true">
            occ_threshold: 45
        </rosparam>
    </node>
    <node name ="map_reflection_transport" pkg="map_transport" type="map_transport_node" output="screen">
        <remap from="map" to="map_reflection" />
        <remap from="map_stream" to="map_reflection_stream" />
        <rosparam subst_value="true">
            occ_threshold: 45
        </rosparam>
    </node>

    <node name ="map_istream" pkg="map_transport" type="map_istream" output="screen">
        <!--<remap from="map_stream_new" to="map_stream" />-->
    </node>
    <node name ="map_edit_istream" pkg="map_transport" type="map_istream" output="screen">
        <remap from="map" to="map_edit" />
        <remap from="map_stream_new" to="map_edit_stream_new" />
    </node>
    <node name ="map_show_istream" pkg="map_transport" type="map_istream" output="screen">
        <remap from="map" to="map_show" />
        <remap from="map_stream_new" to="map_show_stream_new" />
    </node>
    <node name ="map_reflection_istream" pkg="map_transport" type="map_istream" output="screen">
        <remap from="map" to="map_reflection" />
        <remap from="map_stream_new" to="map_reflection_stream_new" />
    </node>

    <node name="waypoint_provider" pkg="yocs_waypoint_provider" type="waypoint_provider" output="screen" unless="$(arg is_client)">
        <param name="filename" value="$(find bringup)/param/waypoints.yaml" />
        <param name="filename_lock" value="$(find bringup)/scripts/.yaml" />
    </node>

    <node name="waypoints_navi" pkg="yocs_waypoints_navi" type="yocs_waypoints_navi_node" output="screen">
        <rosparam subst_value="true">
            frequency: 10.0
        </rosparam>
    </node>

    <arg name="master" default="localhost" />
    <arg name="foreign_master" default="http://$(arg master):11311" />
    <arg name="local_pubs" default="[robot_pose, nav_ctrl_status]" />
    <arg name="foreign_pubs" default="[move_base_simple/goal, nav_ctrl, waypoints, trajectories]" />
    <arg name="local_services" default="[]" />
    <arg name="foreign_services" default="[]" />
    <node pkg="multimaster" type="master_sync.py" name="master_sync" output="screen" respawn="true">
        <rosparam subst_value="true">
            foreign_master: $(arg foreign_master)
            local_pubs: $(arg local_pubs)
            foreign_pubs: $(arg foreign_pubs)
            local_services: $(arg local_services)
            foreign_services: $(arg foreign_services)
        </rosparam>
    </node>

    <node if="$(arg robot_pose_ekf)" name="robot_pose_ekf" pkg="robot_pose_ekf" type="robot_pose_ekf">
        <rosparam subst_value="true">
            output_frame: odom
            base_footprint_frame: base_footprint
            freq: 30.0
            sensor_timeout: 1.0
            odom_used: true
            imu_used: $(arg use_imu)
            vo_used: false
        </rosparam>
    </node>

    <node if="$(arg ekf_localization)" name="scan_matcher_rectifier" pkg="scan_rectifier" type="scan_rectifier" output="screen">
        <remap from="scan_rectified" to="scan_matcher_rectified" />
        <param name="range_max" value="20.0" />
    </node>

    <node if="$(arg ekf_localization)" name="laser_scan_matcher" pkg="laser_scan_matcher" type="laser_scan_matcher_node" output="screen">
        <remap from="scan" to="scan_matcher_rectified" />
        <remap from="imu/data" to="imu_data" />
        <remap from="pose_with_covariance_stamped" to="scan_matcher_pose" />
        <rosparam subst_value="true">
            fixed_frame: odom
            base_frame: base_footprint
            use_imu: true
            use_odom: false
            use_vel: false
            publish_tf: false
            publish_pose: false
            publish_pose_with_covariance_stamped: true
            kf_dist_linear: 0.02
            kf_dist_angular: 0.01
            max_iterations: 1000
            max_correspondence_dist: 2.0
            max_angular_correction_deg: 45.0
            max_linear_correction: 0.2
            do_compute_covariance: 1
            outliers_adaptive_order: 0.95
        </rosparam>
    </node>

    <node if="$(arg double_localization)" name="ekf_node_local" pkg="robot_localization" type="ekf_localization_node" clear_params="true">
        <!-- <remap from="odometry/filtered" to="odom" /> -->
        <rosparam command="load" file="$(find bringup)/scripts/pose_ekf_local.yaml" />
        <remap from="set_pose" to="set_pose_local" />
    </node>    
   
    <node if="$(arg double_localization)" name="ekf_node_global" pkg="robot_localization" type="ekf_localization_node" clear_params="true">
        <rosparam command="load" file="$(find bringup)/scripts/pose_ekf_global.yaml" />
        <remap from="odometry/filtered" to="global_pose" />
        <remap from="set_pose" to="set_pose_global" />
    </node>

    <node if="$(arg double_localization)" name="double_localization_manager" pkg="rosbridge_system" type="double_robot_localization.py" output="screen">
        <param name="amcl_supply_error" value="0.25" />
        <param name="amcl_relocation_error" value="0.25" />
        <param name="correct_distance" value="5" />

        <param name="reflection_supply_error" value="0.2" />
        <param name="reflection_relocation_error" value="0.6" />
        <param name="reflection_correct_distance" value="8" />
    </node>

    <node name="amcl" pkg="amcl" type="amcl" output="screen">
        <remap from="scan" to="scan_rectified" />
        <rosparam subst_value="true">
            laser_min_range: 0.1
            laser_max_range: 19.9
            laser_max_beams: 200
            update_min_d: $(arg amcl_update_min_d)
            update_min_a: $(arg amcl_update_min_a)
            use_map_topic: true
            laser_model_type: likelihood_field
            odom_model_type: diff-corrected
            odom_alpha1: 0.005
            odom_alpha2: 0.005
            odom_alpha3: 0.005
            odom_alpha4: 0.005
            odom_alpha5: 0.005
            base_frame_id: "base_footprint"
            tf_broadcast: false
        </rosparam>
    </node>

    <node if="$(arg use_reflection)" name="scan_reflection" pkg="laser_filters" type="scan_to_scan_filter_chain" output="screen">
        <remap from="scan" to="scan_rectified" />
        <remap from="scan_filtered" to="scan_reflection" />
        <rosparam subst_value="true">
            scan_filter_chain:
            - name: intensity
              type: laser_filters/LaserScanIntensityFilter
              params:
                lower_threshold: 8000
                upper_threshold: 100000
                disp_histogram: 0
        </rosparam>
    </node>

    <node if="$(arg use_reflection)" name="amcl_reflection" pkg="amcl" type="amcl" output="screen">
        <remap from="map" to="map_reflection" />
        <remap from="amcl_pose" to="amcl_pose_reflection" />
        <remap from="particlecloud" to="particlecloud_reflection" />
        <remap from="scan" to="scan_reflection" />
        <remap from="initialpose" to="initialpose_reflection" />
        <rosparam subst_value="true">
            laser_min_range: 0.1
            laser_max_range: 19.9
            laser_max_beams: 200
            update_min_d: $(arg amcl_update_min_d)
            update_min_a: $(arg amcl_update_min_a)
            use_map_topic: true
            laser_model_type: likelihood_field
            odom_model_type: diff-corrected
            odom_alpha1: 0.005
            odom_alpha2: 0.005
            odom_alpha3: 0.005
            odom_alpha4: 0.005
            odom_alpha5: 0.005
            base_frame_id: "base_footprint"
            tf_broadcast: false
        </rosparam>
    </node>

    <node name="move_base" pkg="move_base" type="move_base" output="screen">
        <remap from="odom" to="$(arg move_base_odom)" />
        <remap from="cmd_vel" to="$(arg move_base_cmd_vel)" />
        <rosparam subst_value="true">
            base_global_planner: "global_planner/GlobalPlanner"
            <!-- base_global_planner: "navfn/NavfnROS" -->
            <!-- base_global_planner: "global_planner/MixedPlanner" -->
            <!-- base_global_planner: "global_planner/FixedGlobalPlanner" -->
            base_local_planner: $(arg base_local_planner)
            <!-- base_local_planner: "dwa_local_planner/DWAPlannerROS" -->
            <!-- base_local_planner: "bz_local_planner/BZPlannerROS" -->
            recovery_behavior_enabled: false
            clearing_rotation_allowed: false
            recovery_behaviors:
              - name: 'conservative_reset'
                type: 'clear_costmap_recovery/ClearCostmapRecovery'
              - name: 'aggressive_reset'
                type: 'clear_costmap_recovery/ClearCostmapRecovery'
              <!-- - name: 'straf_reset'
                type: 'straf_recovery/StrafRecovery' -->
            conservative_reset:
                reset_distance: 0.0
                layer_names: [obstacle_layer]
            aggressive_reset:
                reset_distance: 0.0
                layer_names: [obstacle_layer]
            <!-- straf_reset:
                timeout: 10 -->
            controller_frequency: $(arg controller_frequency)
            planner_patience: 5.0
            controller_patience: 2.0
            oscillation_timeout: 0.0
            planner_frequency: 0.0
            max_planning_retries: 0
            global_costmap:
                global_frame: map
                robot_base_frame: base_footprint
                transform_tolerance: $(arg transform_tolerance)
                update_frequency: 1.0
                publish_frequency: 0.5 #0.0
                static_map: true
                resolution: 0.05
                plugins:
                  - name: static_layer
                    type: "costmap_2d::StaticLayer"
                static_layer:
                    map_topic: map_edit
                    trinary_costmap: false
                footprint_topic: footprint_setup
            local_costmap:
                global_frame: map
                robot_base_frame: base_footprint
                transform_tolerance: $(arg transform_tolerance)
                update_frequency: 1.0 #5.0
                publish_frequency: 0.5 #0.0
                static_map: false
                rolling_window: true
                width: 10.0
                height: 10.0
                resolution: 0.5 #0.05
                plugins:
                  - name: inflation_layer
                    type: "costmap_2d::InflationLayer"
                inflation_layer:
                    enabled: false
                    inflation_radius: $(arg footprint_1)
                    cost_scaling_factor: 5.0
                footprint_topic: footprint_setup
            GlobalPlanner:
                allow_unknown: false
                neutral_cost: $(arg neutral_cost)
                cost_factor: $(arg cost_factor)
                orientation_mode: 0
                orientation_window_size: 5
            NavfnROS:
                allow_unknown: false
            FixedGlobalPlanner:
                allow_unknown: false
                subscribe_path_topic: specified_path
                endpoint_tolerance: 2.0
                retrace_path: true
                use_goal_direction: true
            MixedPlanner:
                endpoint_tolerance: 4.995
                fixed_planner:
                    endpoint_tolerance: 5.0
                navfn_planner:
                    planner_is_navfn: true
            TrajectoryPlannerROS:
                acc_lim_x: $(arg acc_lim_x)
                acc_lim_y: $(arg acc_lim_y)
                acc_lim_theta: $(arg acc_lim_theta)
                max_vel_x: $(arg max_vel_x)
                min_vel_x: $(arg min_vel_x)
                max_vel_theta: $(arg max_rot_vel)
                min_vel_theta: -$(arg max_rot_vel)
                min_in_place_vel_theta: $(arg min_rot_vel)
                escape_vel: -0.1 #
                holonomic_robot: false
                y_vels: $(arg max_vel_y)
                yaw_goal_tolerance: $(arg yaw_goal_tolerance)
                xy_goal_tolerance: $(arg xy_goal_tolerance)
                latch_xy_goal_tolerance: true
                vx_samples: 5
                vy_samples: 1
                vth_samples: 20
                occdist_scale: 0.000001 #0.0
                heading_lookahead: 0.325 #0.0
            DWAPlannerROS:
                acc_lim_x: $(arg acc_lim_x)
                acc_lim_y: $(arg acc_lim_y)
                acc_lim_theta: $(arg acc_lim_theta)
                max_trans_vel: $(arg max_trans_vel)
                min_trans_vel: $(arg min_trans_vel)
                max_vel_x: $(arg max_vel_x)
                min_vel_x: $(arg min_vel_x)
                max_vel_y: $(arg max_vel_y)
                min_vel_y: $(arg min_vel_y)
                max_rot_vel: $(arg max_rot_vel)
                min_rot_vel: $(arg min_rot_vel)
                yaw_goal_tolerance: $(arg yaw_goal_tolerance)
                xy_goal_tolerance: $(arg xy_goal_tolerance)
                latch_xy_goal_tolerance: true
                vx_samples: 5
                vy_samples: 1
                vth_samples: 20
                forward_point_distance: 0.325 #0.0
                occdist_scale: 0.000001 #0.0
                path_distance_bias: 32.0 #
                goal_distance_bias: 24.0 #
            BZPlannerROS:
                max_vel_x: 0.25
                min_vel_x: 0.05
                vel_ratio: 0.5
                angular_ratio: 2.0
                relocation_frame: base_footprint
                local_frame_id: base_shelf
                <!-- motion_status: 1 -->
                test_vel: false
                yaw_goal_tolerance: $(arg yaw_goal_tolerance)
                xy_goal_tolerance: $(arg bez_goal_tolerance)
                x_goal_tolerance: $(arg x_goal_tolerance)
                y_goal_tolerance: $(arg y_goal_tolerance)
            <!-- TebLocalPlannerROS:
                acc_lim_x: 0.5
                acc_lim_theta: 3.2
                max_vel_x: $(arg max_vel_x)
                max_vel_theta: $(arg max_rot_vel)
                max_vel_x_backwards: 0.3 #0.2
                min_turning_radius: 0.001
                wheelbase: 1.555
                footprint_model:
                    type: "polygon"
                yaw_goal_tolerance: $(arg yaw_goal_tolerance)
                xy_goal_tolerance: $(arg xy_goal_tolerance)
                free_goal_vel: false
                viapoints_all_candidates: false #true
                odom_topic: odometry/filtered
                map_frame: map -->
        </rosparam>

        <rosparam file="$(find bringup)/scripts/teb_local_planner_params.yaml" />
        <rosparam file="$(find bringup)/scripts/costmap_converter_params.yaml" />

        <param name="TebLocalPlannerROS/xy_goal_tolerance" value="$(arg xy_goal_tolerance)" />
        <param name="TebLocalPlannerROS/yaw_goal_tolerance" value="$(arg yaw_goal_tolerance)" />
        <!-- <param name="TebLocalPlannerROS/footprint_model/vertices" value="$(arg footprint)" /> -->
        <rosparam if="$(arg teb_agf)">
            TebLocalPlannerROS:
                dt_ref: 0.6
                dt_hysteresis: 0.2
                allow_init_with_backwards_motion: True
                max_global_plan_lookahead_dist: 2.0
                min_turning_radius: 0.5
                wheelbase: 1.097
                acc_lim_x: 0.125
                acc_lim_theta: 0.25
                weight_kinematics_forward_drive: 1
        </rosparam>

        <param name="global_costmap/footprint" value="$(arg footprint)" />
        <param name="local_costmap/footprint" value="$(arg footprint)" />

        <rosparam if="$(arg range_enabled)">
            aggressive_reset:
                reset_distance: 0.0
                layer_names: [obstacle_layer, range_sensor_layer]
            global_costmap:
                plugins:
                  - name: static_layer
                    type: "costmap_2d::StaticLayer"
                  - name: obstacle_layer
                    type: "costmap_2d::ObstacleLayer"
                  - name: range_sensor_layer
                    type: "range_sensor_layer::RangeSensorLayer"
                  - name: inflation_layer
                    type: "costmap_2d::InflationLayer"
                range_sensor_layer:
                    mark_threshold: 0.6
                    clear_on_max_reading: true
            local_costmap:
                plugins:
                  - name: obstacle_layer
                    type: "costmap_2d::ObstacleLayer"
                  - name: range_sensor_layer
                    type: "range_sensor_layer::RangeSensorLayer"
                  - name: inflation_layer
                    type: "costmap_2d::InflationLayer"
                range_sensor_layer:
                    mark_threshold: 0.6
                    clear_on_max_reading: true
        </rosparam>
        <param name="global_costmap/range_sensor_layer/range_topics" value="$(arg range_topics)" />
        <param name="local_costmap/range_sensor_layer/range_topics" value="$(arg range_topics)" />
    </node>

    <node name="robot_pose_publisher" pkg="robot_pose_publisher" type="robot_pose_publisher" output="screen" />

    <node name="rosbridge_shell" pkg="rosbridge_shell" type="rosbridge_shell" output="screen" />

    <node name="rosbridge_system" pkg="rosbridge_system" type="rosbridge_system.py" output="screen" >
        <remap from="joy" to="joy_door" />
        <rosparam subst_value="true">
            low_battery: $(arg low_battery)
            full_battery: $(arg full_battery)
            cmd_vel_music: false
            odom_vel_music: true
            turn_threshold_omega: 0.15
            turn_threshold_num: 15
            teb_turn_yaw: 0.4 
            bgm_enabled: true
            bgm_mode: "loop"
            bgm_id: 10
            bgm_vel: 0.1
            departure_alert: true
            goal_reached_alert: true
            obstacle_alert: true
            charging_state_alert: true
            estop_alert: true
            special_area_path: ""
            areas_visulization: false
            initialization_task: ""
        </rosparam>
    </node>

    <node name="rosbridge_rosapi" pkg="rosapi" type="rosapi_node" output="screen" />

    <node name="rosbridge_tcp" pkg="rosbridge_server" type="rosbridge_tcp" output="screen">
        <rosparam subst_value="true">
            port: 7070
        </rosparam>
    </node>

    <node name="rosbridge_websocket" pkg="rosbridge_server" type="rosbridge_websocket" output="screen" />

    <node name="tf2_web_republisher" pkg="tf2_web_republisher" type="tf2_web_republisher" output="screen" />

    <node name="jsnode" pkg="joy" type="joy_node" output="screen">
        <rosparam subst_value="true">
            deadzone: 0.1
            autorepeat_rate: 10.0
            coalesce_interval: 0.1
        </rosparam>
    </node>

    <node name="cmd_vel_rectifier" pkg="cmd_vel_rectifier" type="cmd_vel_rectifier" output="screen">
        <rosparam subst_value="true">
            twist_factor: 0.8
            angular_z_limit: 0.4
        </rosparam>
        <rosparam if="$(arg teb_agf)">
            use_odom_feedback: false
            speed_kp: 2.5
            speed_ki: 0.1
            speed_kd: 0.5
        </rosparam>
    </node>

    <node name="teleop_keyboard" pkg="teleop_keyboard" type="teleop_keyboard" output="screen">
        <remap from="teleop_keyboard/cmd_vel" to="cmd_vel" />
        <rosparam subst_value="true">
            linear_vel_base: 0.2
            angular_vel_base: 0.2
            micro_vel_factor: 0.1
        </rosparam>
    </node>

    <node if="$(arg sound_play)" name="sound_play" pkg="sound_play" type="soundplay_node.py" output="screen" />

    <node name="homing_control_server" pkg="rosbridge_system" type="homing_control_server.py" output="screen" >
        <rosparam subst_value="true">
            max_vel_x: 0.06
            max_omega: 1.0
            rough_xy_error: $(arg xy_hc_tolerance)
            x_error: $(arg x_hc_tolerance)
            yaw_error: $(arg yaw_hc_tolerance)
            k_rho: 1
            k_phi: -1
            k_alpha: -3
        </rosparam>
    </node>

    <node name="obstacle_extractor" pkg="obstacle_detector" type="obstacle_extractor_node">
        <param name="active"               value="true"/>
        <param name="use_scan"             value="true"/>
        <param name="use_pcl"              value="false"/>
        <!--<param name="ranges_num"           value="640"/>-->
        <!--<param name="loop_rate"           value="10"/>-->

        <param name="use_split_and_merge"    value="true"/>
        <param name="circles_from_visibles"  value="true"/>
        <param name="discard_converted_segments" value="true"/>
        <param name="transform_coordinates"  value="true"/>

        <param name="min_group_points"     value="1"/>

        <param name="max_group_distance"   value="0.1"/>
        <param name="distance_proportion"  value="0.00656"/>
        <param name="max_split_distance"   value="0.1"/>
        <param name="max_merge_separation" value="0.1"/>
        <param name="max_merge_spread"     value="0.1"/>
        <param name="max_circle_radius"    value="0.35"/>
        <param name="radius_enlargement"   value="0.0"/>
        <param name="median_filter_group"   value="20"/>

        <param name="frame_id"             value="base_link"/>
        <remap from="scan" to="$(arg scan_obstacle)"/>
    </node>

    <node name="obstacle_avoidance" pkg="obstacle_avoidance" type="obstacle_avoid.py" output="screen">
        <rosparam subst_value="true">
            if_specific_planner: true
            local_planner: "teb_local_planner/TebLocalPlannerROS"
            robot_half_length: 0.3
            robot_half_width: 0.2
            beta: 0.75
            stop_distance: $(arg stop_distance)
            decelerate_distance: $(arg decelerate_distance)
            wall_safe_distance: $(arg wall_safe_distance)
            wall_safe_rad: 0.2
            if_get_footprint: true
            if_shelf_leg_remove: false
            if_view_limit: true
            start_rad: 0.01
            end_rad: 3.14

            straight_rad_limit: 0.1 #0.0
            straight_rot_scale: 0.2 #1.0
        </rosparam>
    </node>


    <group if="$(arg median_player)" ns="music">
        <!--<param name="tf_prefix" value="music"/>-->
        <node name="median_player_server" pkg="median_player" type="median_player_server.py" output="screen" >
            <param name="median_path" value="$(optenv PATH_CATKIN /home/hitrobot/catkin_ws)/pkg_hitrobot/median_player/sound" />
            <param name="if_stop_sofort" value="true" />
        </node>
    </group>

    <group if="$(arg median_player)" ns="alert">
        <!--<param name="tf_prefix" value="alert"/>-->
        <node name="median_player_server" pkg="median_player" type="median_player_server.py" output="screen" >
            <param name="median_path" value="$(optenv PATH_CATKIN /home/hitrobot/catkin_ws)/pkg_hitrobot/median_player/sound" />
            <param name="if_stop_sofort" value="false" />
        </node>
    </group>

    <node pkg="diagnostic_aggregator" type="aggregator_node" name="diag_agg" args="CPP" output="screen" >
        <rosparam command="load" file="$(find bringup)/scripts/agv_analyzer.yaml" />
    </node>
</launch>